{
    "collab_server" : "",
    "contents" : "# Packages ----------------------------------------------------------------\nrm(list=ls())\n\nlibrary(lsr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(rjson)\nlibrary(RSQLite)\nlibrary(nlme)\nlibrary(xtable)\nlibrary(lazyeval)\nlibrary(clues) #non-parametric clustering\nlibrary(pdfCluster) #another non-parametric clustering\nlibrary(V8)\nlibrary(MASS)\nlibrary(mclust) #clustering\nlibrary(gtools) #used for mixed sorting\nlibrary(grid)\nlibrary(corrr)\nlibrary(Hmisc)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Misc functions ------------------------------------------------------------------------------\n\n#RMSE \nrmse = function(x,y){\n  return(sqrt(mean((x-y)^2)))\n}\n\n#simple regression\nfunc_regression = function(x,formula){\n  return(lm(formula,data=x)$fitted.values)\n}\n\n# ================== --------------------------------------------------------------------------\n# EXP1: Load data, trial info, and model predictions ----------------------------------------------------------------------------\nload(\"exp1_prediction.RData\")\nload(\"exp1_responsibility.RData\")\nload(\"exp1_selection.RData\")\nload(\"exp1_info.RData\")\nload(\"exp1_models.RData\")\n# load(\"brick_selection_predictions2.RData\")\n\ndf.exp1.info = df.exp1.info %>% \n  filter(trial != 5)\n\ndf.exp1.models = df.exp1.models %>% \n  filter(trial != 5)\n\n\n# EXP1: Demographic information ----------------------------------------------------------------------------\nload(\"exp1_wide.RData\")\n\ndf.exp1.wide = df.exp1.wide %>% \n  mutate_each(funs(as.numeric(.)),age,time)\n  \ndf.exp1.wide %>% \n  group_by(experiment,condition) %>% \n  summarise(time.mean = mean(time), \n            time.sd = sd(time),\n            exclude = sum(exclude)) %>% \n  mutate_at(vars(contains(\"time\")),funs(round(.,2)))\n  \ndf.exp1.wide$age %>% mean() %>% round()\ndf.exp1.wide$age %>% sd() %>% round(2)\n\ndf.exp1.wide %>% nrow()\n(df.exp1.wide$sex == \"female\") %>% sum()\n\n# EXP1: Find best fitting models --------------------------------------------------------------\n# MINIMIZE LOG-LIKELIHOOD\n\ndf.exp1.selection.long = df.exp1.info %>% \n  select(trial,index) %>% \n  filter(index != 0) %>% \n  left_join(df.exp1.selection %>% select(participant,trial)) %>% \n  mutate(response = 0) %>% \n  select(participant,trial,index,response) %>% \n  arrange(participant,trial,index)\n\nfor (i in 1:nrow(df.exp1.selection)){\n  tmp = df.exp1.selection[i,]\n  df.exp1.selection.long$response[\n    df.exp1.selection.long$participant == tmp$participant & \n      df.exp1.selection.long$trial == tmp$trial & \n      df.exp1.selection.long$index %in% (tmp$response %>% unlist())] = 1\n}\n\ndf.exp1.likelihood = df.exp1.selection.long %>% \n  left_join(df.exp1.models %>% select(-c(x,y,angle))) %>% \n  left_join(df.exp1.info %>% select(index,trial,fall)) %>%\n  rename(truth = fall) %>%\n  mutate_each(funs(./100),contains(\"impulse\")) %>%\n  mutate_each(funs(ifelse(response == 1,.,1-.)),contains(\"impulse\"),truth) %>%\n  mutate_each(funs(ifelse(. == 1,0.99,.)),contains(\"impulse\"),truth) %>%\n  mutate_each(funs(ifelse(. == 0,0.01,.)),contains(\"impulse\"),truth) %>%\n  mutate_each(funs(log(.)),contains(\"impulse\"),truth) %>%\n  summarise_at(vars(contains(\"impulse\"),truth),sum) %>%\n  rename(truth_0_0 = truth) %>%\n  gather(model,likelihood)\n\ndf.exp1.likelihood = df.exp1.likelihood %>% \n  cbind(df.exp1.likelihood$model %>% \n          str_split(\"_\") %>% \n          unlist() %>% \n          matrix(ncol=3,byrow=T) %>% \n          as.data.frame(stringsAsFactors = F) %>% \n          setNames(c(\"noise_type\",\"noise_amt\",\"fric\"))) %>% \n  select(model,noise_type,noise_amt,fric,likelihood)\n\ndf.exp1.bestmodels = df.exp1.likelihood %>% \n  arrange(desc(likelihood)) %>%\n  group_by(noise_type) %>% \n  filter(row_number() == 1) %>% \n  ungroup() %>% \n  arrange(model)\n\ndf.exp1.bestmodels$model[which(df.exp1.bestmodels$model == 'truth_0_0')] = 'ground_truth'\n\ndf.exp1.models = df.exp1.models %>%\n  rename(ground_truth = fall) %>%\n  mutate(ground_truth = ground_truth*100)\n\n# EXP1: Regression model ----------------------------------------------------------------------\n\ntmp = fromJSON(file = \"../../data/features_world1.json\")\ndf.features = tmp %>% \n  unlist() %>%\n  matrix(nrow=42,byrow=T) %>% \n  as.data.frame() %>% \n  setNames(tmp[[1]] %>% names()) %>% \n  mutate(trial = 1:nrow(.)) %>% \n  filter(trial != 5) %>% \n  left_join(df.exp1.info %>% mutate(y = as.numeric(y)) %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  left_join(df.exp1.responsibility %>% group_by(trial) %>% summarise(responsibility = mean(response))) %>% \n  select(trial,everything())\n\nfit = lm(responsibility~\n           # above_naive+\n           # above_contact_general+\n           # above_contact_selective+\n           # edge_distance+\n           # avg_x+\n           avg_y+\n           # avg_angle+\n           # tower_height+\n           nbricks,\n         data = df.features)\n\ntmp = fit %>% summary()\nsqrt(tmp$r.squared)\n\n\n\n# EXP1: Correlation between selection noise models  -------------------------------------------\n\ntmp = df.exp1.models %>% \n  select(one_of(df.exp1.bestmodels$model)) %>% \n  correlate()\n\n# EXP1: Table with model results --------------------------------------------------------------\n\ndf.exp1.table = df.exp1.selection.long %>% \n  group_by(trial,index) %>% \n  summarise(selection = mean(response*100)) %>% \n  ungroup() %>% \n  left_join(df.exp1.models %>% select(trial,index,one_of(df.exp1.bestmodels$model))) %>% \n  summarise_(r_above = interp(~cor(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"impulse-local-above-extended\"])),\n             r_local = interp(~cor(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"impulse-local\"])),\n             r_global = interp(~cor(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"impulse-global\"])),\n             r_truth = interp(~cor(var1,var2),\n                               var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"truth\"])),\n             rmse_above = interp(~rmse(var1,var2),\n                               var1 = as.name(\"selection\"), \n                               var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"impulse-local-above-extended\"])),\n             rmse_local = interp(~rmse(var1,var2),\n                                 var1 = as.name(\"selection\"), \n                                 var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"impulse-local\"])),\n             rmse_global = interp(~rmse(var1,var2),\n                                 var1 = as.name(\"selection\"), \n                                 var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"impulse-global\"])),\n             rmse_truth = interp(~rmse(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp1.bestmodels$model[df.exp1.bestmodels$noise_type == \"truth\"]))\n             ) %>% \n  wideToLong(within = 'model') %>% \n  select(-id)\n\ndf.exp1.table$noise_type = c(\"impulse-local-above-extended\",\"impulse-local\",\"impulse-global\",\"truth\")\n\ndf.exp1.table = df.exp1.table %>% \n  left_join(df.exp1.bestmodels %>% select(noise_type,likelihood,noise_amt)) %>% \n  select(-noise_type) %>% \n  rename(sigma = noise_amt) %>% \n  mutate(model = factor(model,levels = c('truth', 'global', 'local', 'above')),\n         likelihood = round(likelihood)) %>% \n  mutate_each(funs(round(.,2)),r,rmse) %>% \n  arrange(model) %>% \n  xtable() %>% \n  print(include.rownames=F)\n  \n  \n# EXP1: PLOT - Relationship between prediction and responsibility ------------------------------------\n\n#add labels\ndf.labels = matrix(NA,ncol=3,nrow=41) %>% \n  as.data.frame() %>% \n  setNames(c(\"trial\",\"label\",\"colorindex\")) %>% \n  mutate(trial = unique(df.exp1.info$trial))\ndf.labels$label[c(2,10,14,24,28,22,41)] = letters[2:8]\ndf.labels$colorindex = as.factor((!is.na(df.labels$label))*1)\n\ndf.plot = df.exp1.prediction %>% \n  rbind(df.exp1.responsibility) %>% \n  left_join(df.exp1.info %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  mutate(response = ifelse(condition == 'prediction',response/nbricks,response)) %>% #transforms predictions to proportion of bricks \n  group_by(condition,trial) %>% \n  summarise(mean = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  ungroup() %>%\n  gather(variable,value,-c(trial,condition)) %>% \n  unite(tmp,condition,variable) %>% \n  spread(tmp,value) %>% \n  mutate(prediction_fit = func_regression(.,formula(responsibility_mean~prediction_mean))) %>% \n  left_join(df.labels)\n\nmodel = 'prediction_fit'\n\nggplot(df.plot,aes_string(x=model,y=\"responsibility_mean\"))+\n  geom_smooth(method='lm',color='black')+\n  geom_point(size=2.5,aes(color = colorindex))+\n  geom_errorbar(aes(ymin = responsibility_low, ymax = responsibility_high,color = colorindex),width=0.01)+\n  geom_text(aes(label=label),hjust=1.5,vjust=0.2,size = 7)+\n  annotate(geom = \"text\", x=30,y=Inf,label = paste0(\"r = \", cor(df.plot[[model]],df.plot$responsibility_mean) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 10)+\n  annotate(geom = \"text\", x=30,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot[[model]],df.plot$responsibility_mean) %>% round(2)),\n           hjust = 0, vjust = 3, size = 10)+\n  theme_bw()+\n  scale_colour_grey(start = 0.5, end = 0)+\n  scale_fill_grey(start = 0.5, end = 0)+\n  scale_x_continuous(breaks = seq(0,100,10))+\n  # scale_x_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  scale_y_continuous(breaks = seq(0,100,10))+\n  # scale_y_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  labs(x = \"proportion of bricks predicted to fall\", y = \"responsibility judgment\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)),\n        axis.text = element_text(size=20),\n        legend.position = \"none\"\n  )\nggsave(paste0('../../figures/plots/exp1_prediction_responsibility_scatter.pdf'),width = 8,height = 6)\n\n# EXP1: PLOT - Relationship between selection and responsibility ------------------------------------\n\n#add labels\ndf.labels = matrix(NA,ncol=3,nrow=41) %>% \n  as.data.frame() %>% \n  setNames(c(\"trial\",\"label\",\"colorindex\")) %>% \n  mutate(trial = unique(df.exp1.info$trial))\ndf.labels$label[c(2,10,14,24,28,22,41)] = letters[2:8]\ndf.labels$colorindex = as.factor((!is.na(df.labels$label))*1)\n\ndf.plot = df.exp1.selection %>% \n  select(participant,trial,number) %>% \n  rename(response = number) %>% \n  mutate(condition = 'selection') %>% \n  rbind(df.exp1.responsibility %>% select(participant,condition,trial,response)) %>% \n  left_join(df.exp1.info %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  mutate(response = ifelse(condition == 'selection',response/nbricks,response)) %>% #transforms predictions to proportion of bricks\n  group_by(condition,trial) %>% \n  summarise(mean = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  ungroup() %>%\n  gather(variable,value,-c(trial,condition)) %>% \n  unite(tmp,condition,variable) %>% \n  spread(tmp,value) %>% \n  mutate(selection_fit = func_regression(.,formula(responsibility_mean~selection_mean))) %>% \n  left_join(df.labels)\n\nmodel = 'selection_fit'\n\nggplot(df.plot,aes_string(x=model,y=\"responsibility_mean\"))+\n  geom_smooth(method='lm',color='black')+\n  geom_errorbar(aes(ymin = responsibility_low, ymax = responsibility_high,color = colorindex),width=0.01)+\n  # geom_errorbarh(aes(xmin = selection_low, xmax = selection_high,color = colorindex),width=0.01)+\n  geom_point(size=2.5,aes(color = colorindex))+\n  geom_point(size=2.5,aes(color = colorindex),data = subset(df.plot,!is.na(label)))+\n  geom_text(aes(label=label),hjust=1.5,vjust=0.2,size = 6)+\n  annotate(geom = \"text\", x=30,y=Inf,label = paste0(\"r = \", cor(df.plot[[model]],df.plot$responsibility_mean) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 10)+\n  annotate(geom = \"text\", x=30,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot[[model]],df.plot$responsibility_mean) %>% round(2)),\n           hjust = 0, vjust = 3, size = 10)+\n  theme_bw()+\n  scale_colour_grey(start = 0.5, end = 0)+\n  scale_fill_grey(start = 0.5, end = 0)+\n  scale_x_continuous(breaks = seq(0,100,10))+\n  # scale_x_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  scale_y_continuous(breaks = seq(0,100,10))+\n  # scale_y_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  labs(x = \"proportion of bricks (empirical)\", y = \"responsibility\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)),\n        axis.text = element_text(size=20),\n        legend.position = \"none\"\n  )\n\n# ggsave(paste0('../../figures/plots/exp1_prediction_responsibility_scatter.pdf'),width = 8,height = 6)\n\n\n\n# EXP1: PLOT - Relationship between selection and prediction ------------------------------------\n\n#add labels\ndf.labels = matrix(NA,ncol=3,nrow=41) %>% \n  as.data.frame() %>% \n  setNames(c(\"trial\",\"label\",\"colorindex\")) %>% \n  mutate(trial = unique(df.exp1.info$trial))\ndf.labels$label[c(2,10,14,24,28,22,41)] = letters[2:8]\ndf.labels$colorindex = as.factor((!is.na(df.labels$label))*1)\n\ndf.plot = df.exp1.selection %>% \n  select(participant,trial,number) %>% \n  rename(response = number) %>% \n  mutate(condition = 'selection') %>% \n  rbind(df.exp1.prediction %>% select(participant,condition,trial,response)) %>% \n  # left_join(df.exp1.info %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  # mutate(response = ifelse(condition == 'selection',response/nbricks,response)) %>% #transforms predictions to proportion of bricks\n  group_by(condition,trial) %>% \n  summarise(mean = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  ungroup() %>%\n  gather(variable,value,-c(trial,condition)) %>% \n  unite(tmp,condition,variable) %>% \n  spread(tmp,value) %>% \n  # mutate(selection_fit = func_regression(.,formula(responsibility_mean~selection_mean))) %>% \n  left_join(df.labels)\n\n# model = 'selection_fit'\n\nggplot(df.plot,aes(x=prediction_mean,y=selection_mean))+\n  geom_abline(intercept = 0,slope = 1, linetype = 2)+\n  geom_smooth(method='lm',color='black')+\n  geom_errorbar(aes(ymin = selection_low, ymax = selection_high,color = colorindex),width=0)+\n  geom_errorbarh(aes(xmin = prediction_low, xmax = prediction_high,color = colorindex),height=0)+\n  geom_point(size=2.5,aes(color = colorindex))+\n  geom_point(size=2.5,aes(color = colorindex),data = subset(df.plot,!is.na(label)))+\n  geom_text(aes(label=label),hjust=1.5,vjust=0,size = 8)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"r = \", cor(df.plot$prediction_mean,df.plot$selection_mean) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 10)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot$prediction_mean,df.plot$selection_mean) %>% round(2)),\n           hjust = 0, vjust = 3, size = 10)+\n  theme_bw()+\n  scale_colour_grey(start = 0.5, end = 0)+\n  scale_fill_grey(start = 0.5, end = 0)+\n  scale_x_continuous(breaks = seq(0,10,1),limits = c(0,8))+\n  # scale_x_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  scale_y_continuous(breaks = seq(0,10,1),limits = c(0,8))+\n  # scale_y_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  labs(x = expression(paste(bold(\"predicted\"),\" number of bricks\")), \n       y = expression(paste(bold(\"selected\"),\" number of bricks\")))+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)),\n        axis.text = element_text(size=20),\n        legend.position = \"none\"\n  )\n\n# ggsave(paste0('../../figures/plots/exp1_prediction_selection_scatter.pdf'),width = 8,height = 6)\n\n\n\n# EXP1: PLOT - Relationship between selection and noise models -----------------------------\n\nmodelindex = 4 #1: global, 2: local, 3: local-above, 4: ground truth\n\ndf.modelindex = df.exp1.bestmodels %>% \n  mutate(modelname = c(\"global noise\",\"local noise\",\"above noise\",\"ground truth\"),\n         label = c(\"b)\",\"c)\",\"d)\",\"a)\")) %>% \n  select(model,modelname,label)\n\ndf.plot = df.exp1.selection.long %>% \n  group_by(trial,index) %>% \n  summarise(data = (sum(response)/n())*100) %>% \n  ungroup %>% \n  left_join(df.exp1.models %>% select(trial,index,model = one_of(df.modelindex$model[modelindex])))\n  \nggplot(df.plot,aes(x=data,y = model))+\n  geom_smooth(method='lm',color='black',fullrange=T)+\n  geom_abline(intercept=0, slope=1, linetype='dashed') +\n  geom_point(size=3,alpha=0.5)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"r = \", cor(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 8)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust =3, size = 8)+\n  scale_y_continuous(breaks = seq(0,100,25),labels = seq(0,100,25),limits = c(0,115))+\n  scale_x_continuous(breaks = seq(0,100,25),labels = seq(0,100,25),limits = c(0,100))+\n  theme_bw()+\n  labs(y=bquote(.(df.modelindex$label[modelindex])~bold(.(df.modelindex$modelname[modelindex]))),\n       x = \"probability that a brick was selected\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10))\n  )\nggsave(paste0(\"../../figures/plots/exp1_selection_\",df.modelindex$model[modelindex],\"_scatter.pdf\"),width = 8,height = 6)\n\n# EXP1: PLOT - Relationship between prediction and noise models -----------------------------\n\nmodelindex = 1 #1: local-above, 2: global, 3: local, 4: ground truth\n\ndf.modelindex = df.exp1.bestmodels %>% \n  mutate(modelname = c(\"above noise\",\"global noise\",\"local noise\", \"ground truth\"),\n         label = c(\"d)\",\"b)\",\"c)\",\"a)\")) %>% \n  select(model,modelname,label)\n# df.modelindex[4,] = c('ground_truth', 'ground truth', 'a)')\n\ndf.plot = df.exp1.prediction %>% \n  group_by(trial) %>% \n  summarise(data = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  left_join(df.exp1.models %>% \n              select(trial,index,model = one_of(df.modelindex$model[modelindex])) %>% \n                       group_by(trial) %>% \n                       summarise(model = sum((model/100))))\n\nggplot(df.plot,aes(x=data,y = model))+\n  geom_smooth(method='lm',color='black')+\n  geom_abline(intercept=0, slope=1, linetype='dashed') +\n  geom_point(size=3,alpha=0.5)+\n  # geom_text(label = paste0(df.plot$trial,\"[\",df.plot$index,\"]\"),hjust = 0, vjust = 0, parse = T)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"r = \", cor(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 8)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust =3, size = 8)+\n  scale_y_continuous(breaks = seq(0,10,1),labels = seq(0,10,1),limits = c(0,7))+\n  scale_x_continuous(breaks = seq(0,10,1),labels = seq(0,10,1),limits = c(0,7))+\n  # coord_fixed(xlim = c(0,8), ylim = c(0,8))+\n  # ggtitle(modelindex)+\n  theme_bw()+\n  # labs(y=\"model prediction\", x = \"empirical selections\")+\n  labs(y=bquote(.(df.modelindex$label[modelindex])~bold(.(df.modelindex$modelname[modelindex]))),\n       x = \"number of bricks predicted to fall\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10))\n  )\n# ggsave(paste0(\"../../figures/plots/exp1_selection_\",df.modelindex$model[modelindex],\"_scatter.pdf\"),width = 8,height = 6)\n\n# EXP1: PLOT - Relationship between prediction and noise models -----------------------------\n\nmodelindex = 1 #1: local-above, 2: global, 3: local, 4: ground truth\n\ndf.modelindex = df.exp1.bestmodels %>% \n  mutate(modelname = c(\"above noise\",\"global noise\",\"local noise\", \"ground truth\"),\n         label = c(\"d)\",\"b)\",\"c)\",\"a)\")) %>% \n  select(model,modelname,label)\n# df.modelindex[4,] = c('ground_truth', 'ground truth', 'a)')\n\ndf.plot = df.exp1.responsibility %>% \n  group_by(trial) %>% \n  summarise(data = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  ungroup() %>% \n  left_join(df.exp1.models %>% \n              select(trial,index,model = one_of(df.modelindex$model[modelindex])) %>% \n              group_by(trial) %>% \n              summarise(model = sum((model/100)))) %>% \n  left_join(df.exp1.info %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  mutate(model = model/nbricks) %>% #transforms predictions to proportion of bricks \n  select(-nbricks) %>% \n  mutate(model = func_regression(.,formula(data~model))) %>% \n  left_join(df.labels)\n  \n\nggplot(df.plot,aes(x=data,y = model))+\n  geom_smooth(method='lm',color='black')+\n  # geom_abline(intercept=0, slope=1, linetype='dashed') +\n  geom_point(size=3,alpha=0.5)+\n  # geom_text(label = paste0(df.plot$trial,\"[\",df.plot$index,\"]\"),hjust = 0, vjust = 0, parse = T)+\n  annotate(geom = \"text\", x=-Inf,y=Inf,label = paste0(\"r = \", cor(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 8)+\n  annotate(geom = \"text\", x=-Inf,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust =3, size = 8)+\n  # scale_y_continuous(breaks = seq(0,10,1),labels = seq(0,10,1),limits = c(0,7))+\n  # scale_x_continuous(breaks = seq(0,10,1),labels = seq(0,10,1),limits = c(0,7))+\n  # coord_fixed(xlim = c(0,8), ylim = c(0,8))+\n  # ggtitle(modelindex)+\n  theme_bw()+\n  # labs(y=\"model prediction\", x = \"empirical selections\")+\n  labs(y=bquote(.(df.modelindex$label[modelindex])~bold(.(df.modelindex$modelname[modelindex]))),\n       x = \"number of bricks predicted to fall\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10))\n  )\n# ggsave(paste0(\"../../figures/plots/exp1_selection_\",df.modelindex$model[modelindex],\"_scatter.pdf\"),width = 8,height = 6)\n\n\n# ================== --------------------------------------------------------------------------\n# EXP2: Load data, trial info, and model predictions ------------------------------------------\nload(\"exp2_prediction.RData\")\nload(\"exp2_responsibility.RData\")\nload(\"exp2_selection.RData\")\nload(\"exp2_info.RData\")\nload(\"exp2_models.RData\")\n\n\n# EXP2: Demographic information ----------------------------------------------------------------------------\nload(\"exp2_wide.RData\")\n\ndf.exp2.wide = df.exp2.wide %>% \n  mutate_each(funs(as.numeric(.)),age,time)\n\ndf.exp2.wide %>% \n  group_by(experiment,condition) %>% \n  summarise(time.mean = mean(time), \n            time.sd = sd(time),\n            exclude = sum(exclude),\n            n = n()) %>% \n  mutate_at(vars(contains(\"time\")),funs(round(.,2)))\n\ndf.exp2.wide$age %>% mean() %>% round()\ndf.exp2.wide$age %>% sd() %>% round(2)\n\ndf.exp2.wide %>% nrow()\n(df.exp2.wide$sex == \"female\") %>% sum()\n\n# EXP2: Find best fitting models --------------------------------------------------------------\n# MINIMIZE LOG-LIKELIHOOD\n\ndf.exp2.selection.long = df.exp2.info %>% \n  select(trial,index) %>% \n  filter(index != 0) %>% \n  left_join(df.exp2.selection %>% select(participant,trial)) %>% \n  mutate(response = 0) %>% \n  select(participant,trial,index,response) %>% \n  arrange(participant,trial,index)\n\nfor (i in 1:nrow(df.exp2.selection)){\n  tmp = df.exp2.selection[i,]\n  df.exp2.selection.long$response[\n    df.exp2.selection.long$participant == tmp$participant & \n      df.exp2.selection.long$trial == tmp$trial & \n      df.exp2.selection.long$index %in% (tmp$response %>% unlist())] = 1\n}\n\ndf.exp2.likelihood = df.exp2.selection.long %>% \n  left_join(df.exp2.models %>% select(-c(x,y,angle))) %>% \n  left_join(df.exp2.info %>% select(index,trial,fall)) %>%\n  rename(truth = fall) %>%\n  mutate_each(funs(./100),contains(\"impulse\")) %>% \n  mutate_each(funs(ifelse(response == 1,.,1-.)),contains(\"impulse\"),truth) %>%\n  mutate_each(funs(ifelse(. == 1,0.99,.)),contains(\"impulse\"),truth) %>%\n  mutate_each(funs(ifelse(. == 0,0.01,.)),contains(\"impulse\"),truth) %>%\n  mutate_each(funs(log(.)),contains(\"impulse\"),truth) %>%\n  summarise_at(vars(contains(\"impulse\"),truth),sum) %>%\n  rename(truth_0_0 = truth) %>%\n  gather(model,likelihood)\n\ndf.exp2.likelihood = df.exp2.likelihood %>% \n  cbind(df.exp2.likelihood$model %>%\n          str_split(\"_\") %>% \n          unlist() %>% \n          matrix(ncol=3,byrow=T) %>% \n          as.data.frame(stringsAsFactors = F) %>% \n          setNames(c(\"noise_type\",\"noise_amt\",\"fric\"))) %>% \n  select(model,noise_type,noise_amt,fric,likelihood)\n\ndf.exp2.bestmodels = df.exp2.likelihood %>% \n  arrange(desc(likelihood)) %>%\n  group_by(noise_type) %>% \n  filter(row_number() == 1) %>% \n  ungroup() %>% \n  arrange(model)\ndf.exp2.bestmodels$model[which(df.exp2.bestmodels$model == 'truth_0_0')] = 'ground_truth'\n\ndf.exp2.models = df.exp2.models %>%\n  rename(ground_truth = fall) %>%\n  mutate(ground_truth = ground_truth*100)\n\n\n# EXP1: Regression model ----------------------------------------------------------------------\n\ntmp = fromJSON(file = \"../../data/features_world2.json\")\ndf.features = tmp %>% \n  unlist() %>%\n  matrix(nrow=42,byrow=T) %>% \n  as.data.frame() %>% \n  setNames(tmp[[1]] %>% names()) %>% \n  mutate(trial = 1:nrow(.)) %>% \n  left_join(df.exp2.info %>% mutate(y = as.numeric(y)) %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  left_join(df.exp2.responsibility %>% group_by(trial) %>% summarise(responsibility = mean(response))) %>% \n  select(trial,everything())\n\nfit = lm(responsibility~\n           # above_naive+\n           # above_contact_general+\n           above_contact_selective+\n           edge_distance+\n           # avg_x+\n           # avg_y+\n           # avg_angle+\n           # tower_height+\n           # nbricks,\n         data = df.features)\n\ntmp = fit %>% summary()\nsqrt(tmp$r.squared)\n\n# EXP2: Table with model results --------------------------------------------------------------\n\ndf.exp2.table = df.exp2.selection.long %>% \n  group_by(trial,index) %>% \n  summarise(selection = mean(response*100)) %>% \n  ungroup() %>% \n  left_join(df.exp2.models %>% select(trial,index,one_of(df.exp2.bestmodels$model))) %>% \n  summarise_(r_above = interp(~cor(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"impulse-local-above-extended\"])),\n             r_local = interp(~cor(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"impulse-local\"])),\n             r_global = interp(~cor(var1,var2),\n                               var1 = as.name(\"selection\"), \n                               var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"impulse-global\"])),\n             r_truth = interp(~cor(var1,var2),\n                              var1 = as.name(\"selection\"), \n                              var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"truth\"])),\n             rmse_above = interp(~rmse(var1,var2),\n                                 var1 = as.name(\"selection\"), \n                                 var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"impulse-local-above-extended\"])),\n             rmse_local = interp(~rmse(var1,var2),\n                                 var1 = as.name(\"selection\"), \n                                 var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"impulse-local\"])),\n             rmse_global = interp(~rmse(var1,var2),\n                                  var1 = as.name(\"selection\"), \n                                  var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"impulse-global\"])),\n             rmse_truth = interp(~rmse(var1,var2),\n                                 var1 = as.name(\"selection\"), \n                                 var2 = as.name(df.exp2.bestmodels$model[df.exp2.bestmodels$noise_type == \"truth\"]))\n  ) %>% \n  wideToLong(within = 'model') %>% \n  select(-id)\n\ndf.exp2.table$noise_type = c(\"impulse-local-above-extended\",\"impulse-local\",\"impulse-global\",\"truth\")\n\ndf.exp2.table = df.exp2.table %>% \n  left_join(df.exp2.bestmodels %>% select(noise_type,likelihood,noise_amt)) %>% \n  select(-noise_type) %>% \n  rename(sigma = noise_amt) %>% \n  mutate(model = factor(model,levels = c('truth', 'global', 'local', 'above')),\n         likelihood = round(likelihood)) %>% \n  mutate_each(funs(round(.,2)),r,rmse) %>% \n  arrange(model) %>% \n  xtable() %>% \n  print(include.rownames=F)\n\n# EXP2: Correlation between selection noise models  -------------------------------------------\n\ntmp = df.exp2.models %>% \n  # filter(trial %in% 15:28) %>%\n  # group_by(trial) %>% \n  # select(trial,one_of(c(df.exp2.bestmodels$model,\"ground_truth\"))) %>%\n  select(one_of(c(df.exp2.bestmodels$model,\"ground_truth\"))) %>%\n  # summarise(tmp = cor(`impulse-local-above-extended_10.4_0.5`,`impulse-global_3.6_0.5`)) %>% \n  correlate() %>% \n  print()\n\n# EXP2: PLOT - Relationship between prediction and responsibility ------------------------------------\n\n# here, taking the proportion of bricks actually works slightly less good \n\n#add labels\ndf.labels = matrix(NA,ncol=3,nrow=42) %>% \n  as.data.frame() %>% \n  setNames(c(\"trial\",\"label\",\"colorindex\")) %>% \n  mutate(trial = unique(df.exp2.info$trial))\ndf.labels$label[c(8,2,17,18,26,33,42,21)] = letters[1:8]\ndf.labels$colorindex = as.factor((!is.na(df.labels$label))*1)\n\ndf.plot = df.exp2.prediction %>% \n  rbind(df.exp2.responsibility) %>% \n  left_join(df.exp2.info %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  mutate(response = ifelse(condition == 'prediction',response/nbricks,response)) %>% #transforms predictions to proportion of bricks\n  group_by(condition,trial) %>% \n  summarise(mean = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  ungroup() %>%\n  gather(variable,value,-c(trial,condition)) %>% \n  unite(tmp,condition,variable) %>% \n  spread(tmp,value) %>% \n  mutate(prediction_fit = func_regression(.,formula(responsibility_mean~prediction_mean))) %>% \n  left_join(df.labels)\n\nmodel = 'prediction_fit'\n\nggplot(df.plot,aes_string(x=model,y=\"responsibility_mean\"))+\n  geom_smooth(method='lm',color='black')+\n  geom_point(size=2.5,aes(color = colorindex))+\n  geom_errorbar(aes(ymin = responsibility_low, ymax = responsibility_high,color = colorindex),width=0.01)+\n  geom_text(aes(label=label),hjust=1.5,vjust=0.2,size = 7)+\n  annotate(geom = \"text\", x=15,y=Inf,label = paste0(\"r = \", cor(df.plot[[model]],df.plot$responsibility_mean) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 10)+\n  annotate(geom = \"text\", x=15,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot[[model]],df.plot$responsibility_mean) %>% round(2)),\n           hjust = 0, vjust = 3, size = 10)+\n  theme_bw()+\n  scale_colour_grey(start = 0.5, end = 0)+\n  scale_fill_grey(start = 0.5, end = 0)+\n  scale_x_continuous(breaks = seq(0,100,10))+\n  # scale_x_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  scale_y_continuous(breaks = seq(0,100,10))+\n  # scale_y_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  labs(x = \"proportion of bricks predicted to fall\", y = \"responsibility judgment\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)),\n        axis.text = element_text(size=20),\n        legend.position = \"none\"\n  )\nggsave(paste0('../../figures/plots/exp2_prediction_responsibility_scatter.pdf'),width = 8,height = 6)\n\n# EXP2: PLOT - Relationship between selection and noise models -----------------------------\n\nmodelindex = 4 #1: global, 2: local, 3: local-above, 4: ground truth\n\ndf.modelindex = df.exp2.bestmodels %>% \n  mutate(modelname = c(\"global noise\",\"local noise\",\"above noise\",\"ground truth\"),\n         label = c(\"b)\",\"c)\",\"d)\",\"a)\")) %>% \n  select(model,modelname,label)\n\ndf.plot = df.exp2.selection.long %>% \n  group_by(trial,index) %>% \n  summarise(data = (sum(response)/n())*100) %>% \n  ungroup %>% \n  left_join(df.exp2.models %>% select(trial,index,model = one_of(df.modelindex$model[modelindex])))\n\nggplot(df.plot,aes(x=data,y = model))+\n  geom_smooth(method='lm',color='black')+\n  geom_abline(intercept=0, slope=1, linetype='dashed') +\n  geom_point(size=3,alpha=0.5)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"r = \", cor(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 8)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot$data,df.plot$model) %>% round(2)),\n           hjust = 0, vjust =3, size = 8)+\n  scale_y_continuous(breaks = seq(0,100,25),labels = seq(0,100,25),limits = c(0,115))+\n  scale_x_continuous(breaks = seq(0,100,25),labels = seq(0,100,25),limits = c(0,100))+\n  theme_bw()+\n  labs(y=bquote(.(df.modelindex$label[modelindex])~bold(.(df.modelindex$modelname[modelindex]))),\n       x = \"probability that a brick was selected\")+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10))\n  )\nggsave(paste0(\"../../figures/plots/exp2_selection_\",df.modelindex$model[modelindex],\"_scatter.pdf\"),width = 8,height = 6)\n\n\n# EXP2: PLOT - Relationship between selection and prediction ------------------------------------\n\n#add labels\ndf.labels = matrix(NA,ncol=3,nrow=42) %>% \n  as.data.frame() %>% \n  setNames(c(\"trial\",\"label\",\"colorindex\")) %>% \n  mutate(trial = unique(df.exp2.info$trial))\ndf.labels$label[c(8,2,17,18,26,33,42,21)] = letters[1:8]\ndf.labels$colorindex = as.factor((!is.na(df.labels$label))*1)\n\ndf.plot = df.exp2.selection %>% \n  select(participant,trial,number) %>% \n  rename(response = number) %>% \n  mutate(condition = 'selection') %>% \n  rbind(df.exp2.prediction %>% select(participant,condition,trial,response)) %>% \n  # left_join(df.exp2.info %>% group_by(trial) %>% summarise(nbricks = n())) %>% \n  # mutate(response = ifelse(condition == 'selection',response/nbricks,response)) %>% #transforms predictions to proportion of bricks\n  group_by(condition,trial) %>% \n  summarise(mean = mean(response),\n            low = smean.cl.boot(response)[2],\n            high = smean.cl.boot(response)[3]) %>% \n  ungroup() %>%\n  gather(variable,value,-c(trial,condition)) %>% \n  unite(tmp,condition,variable) %>% \n  spread(tmp,value) %>% \n  # mutate(selection_fit = func_regression(.,formula(responsibility_mean~selection_mean))) %>% \n  left_join(df.labels)\n\n# model = 'selection_fit'\n\nggplot(df.plot,aes(x=prediction_mean,y=selection_mean))+\n  geom_abline(intercept = 0,slope = 1, linetype = 2)+\n  geom_smooth(method='lm',color='black')+\n  geom_errorbar(aes(ymin = selection_low, ymax = selection_high,color = colorindex),width=0)+\n  geom_errorbarh(aes(xmin = prediction_low, xmax = prediction_high,color = colorindex),height=0)+\n  geom_point(size=2.5,aes(color = colorindex))+\n  geom_point(size=2.5,aes(color = colorindex),data = subset(df.plot,!is.na(label)))+\n  geom_text(aes(label=label),hjust=1.5,vjust=0,size = 8)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"r = \", cor(df.plot$prediction_mean,df.plot$selection_mean) %>% round(2)),\n           hjust = 0, vjust = 1.5, size = 10)+\n  annotate(geom = \"text\", x=0,y=Inf,label = paste0(\"RMSE = \", rmse(df.plot$prediction_mean,df.plot$selection_mean) %>% round(2)),\n           hjust = 0, vjust = 3, size = 10)+\n  theme_bw()+\n  scale_colour_grey(start = 0.5, end = 0)+\n  scale_fill_grey(start = 0.5, end = 0)+\n  scale_x_continuous(breaks = seq(0,10,1),limits = c(0,8))+\n  # scale_x_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  scale_y_continuous(breaks = seq(0,10,1),limits = c(0,8))+\n  # scale_y_continuous(breaks = seq(0,100,20),limits = c(17,80))+\n  labs(x = expression(paste(bold(\"predicted\"),\" number of bricks\")), \n       y = expression(paste(bold(\"selected\"),\" number of bricks\")))+\n  theme(text = element_text(size=24),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)),\n        axis.text = element_text(size=20),\n        legend.position = \"none\"\n  )\n\nggsave(paste0('../../figures/plots/exp2_prediction_selection_scatter.pdf'),width = 8,height = 6)\n\n\n",
    "created" : 1485397600853.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "0|11|23|0|\n24|17|35|0|\n27|21|29|0|\n32|38|34|0|\n36|21|36|95|\n37|53|51|0|\n52|32|70|0|\n71|33|124|0|\n156|52|161|0|\n162|33|210|2|\n211|66|263|0|\n264|65|324|0|\n325|61|387|0|\n388|63|421|0|\n422|64|464|0|\n465|64|515|0|\n516|21|516|95|\n517|53|524|0|\n525|32|544|0|\n545|33|598|0|\n627|33|674|0|\n675|52|685|0|\n686|66|740|0|\n741|63|775|0|\n776|61|838|0|\n",
    "hash" : "3360058330",
    "id" : "9AF93A20",
    "lastKnownWriteTime" : 1485398676,
    "last_content_update" : 1485398686865,
    "path" : "~/Dropbox (MIT)/work/projects/towers/code/R/towers_cogsci.R",
    "project_path" : "towers_cogsci.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}